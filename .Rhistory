width = 0.7) +
geom_col(aes(y = Performance,
fill = Company),
width = 0.7) +
geom_hline(yintercept = 0, color = "#666666", size = 1.2) +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 160),
breaks = (0:6) * 25,
labels = (0:6) * 25) +
theme(axis.text = element_text(size = 12),
axis.ticks = element_line(size = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_line(size = 1.5),
panel.border = element_blank(),
legend.position = "none")
##선 그래프
# 데이터 준비
set.seed(1228)
df = data.frame(date = seq(as.POSIXct("2018-01-01"), as.POSIXct("2018-07-01"), by = "month"),
value = cumsum(sample(1:4, 7, replace = TRUE)))
df
# 01
ggplot(data = df,
aes(x = date,
y = value)) +
geom_line()
# 02
ggplot(data = df,
aes(x = date,
y = value)) +
geom_line(size = 2) +
scale_x_datetime(breaks = df$date,
labels = paste0(lubridate::month(df$date), "M"))
# 03
ggplot(data = df,
aes(x = date,
y = value)) +
geom_line(size = 2) +
geom_point(size = 5) +
geom_point(size = 3, color = "#FFFFFF") +
scale_x_datetime(breaks = df$date,
labels = paste0(lubridate::month(df$date), "M"))
# 04
ggplot(data = df,
aes(x = date,
y = value)) +
geom_line(data = df[-nrow(df), ],
size = 2) +
geom_line(data = df[(nrow(df) - 1):nrow(df), ],
size = 2,
color = "#888888") +
geom_point(size = 5) +
geom_point(size = 3, color = "#FFFFFF") +
scale_x_datetime(breaks = df$date,
labels = paste0(lubridate::month(df$date), "M"))
# 05
ggplot(data = df,
aes(x = date,
y = value)) +
geom_line(data = df[-nrow(df), ],
size = 2) +
geom_line(data = df[(nrow(df) - 1):nrow(df), ],
size = 1.2,
color = "#888888",
linetype = 3) +
geom_point(size = 5) +
geom_point(size = 3, color = "#FFFFFF") +
scale_x_datetime(breaks = df$date,
labels = paste0(lubridate::month(df$date), "M"))
#### __ [02] 지역 비교 ####
# 데이터 준비
library("maptools")
##지역 비교
# 데이터 준비
library("maptools")
library("maps")
library("ggsn")
library("scatterpie")
map = readShapePoly("2013_si_do.shp", verbose = FALSE)
map_for = fortify(map)
map = readShapePoly("2013_si_do.shp", verbose = FALSE)
map_for = fortify(map)
head(map_for)
# map_for = map_for[(map_for$long >= 125.6) & (map_for$long <= 130), ]
df_cl = read.csv("C:/Users/ChanWoo/Documents/R/10_19/clusters.csv")
head(df_cl)
##geom_polygon 활용 흐음..
# 01
ggplot(data = df_cl) +
geom_polygon(data = map_for,
aes(x = long,
y = lat,
group = obs),
color = "#000000")
##geom_polygon 활용 흐음..
# 01
ggplot(data = df_cl) +
geom_polygon(data = map_for,
aes(x = long,
y = lat,
group = obs),
color = "#000000")
# map_for = map_for[(map_for$long >= 125.6) & (map_for$long <= 130), ]
df_cl = read.csv("C:/Users/ChanWoo/Documents/R/10_19/clusters.csv")
head(df_cl)
##geom_polygon 활용 흐음..
# 01
ggplot(data = df_cl) +
geom_polygon(data = map_for,
aes(x = long,
y = lat,
group = obs),
color = "#000000")
##geom_polygon 활용 흐음..
# 01
ggplot(data = df_cl) +
geom_polygon(data = map_for,
aes(x = long,
y = lat,
group = group),
color = "#000000")
# 02
library("dplyr")
##geom_polygon 활용 흐음..
# 01
ggplot(data = df_cl) +
geom_polygon(data = map_for,
aes(x = long,
y = lat,
group = group),
color = "#000000")
# 02
library("dplyr")
df_index = data.frame(id = as.character(0:16),
index = 0:16,
stringsAsFactors = FALSE)
map_join = left_join(map_for, df_index)
head(map_join)
ggplot(data = df_cl) +
geom_polygon(data = map_join,
aes(x = long,
y = lat,
fill = index,
group = group),
color = "#000000")
##파이차트 3.14..?zzzzz
# 데이터 준비
df_cl = read.csv("clusters.csv")
head(df_cl)
# 그래프
ggplot(data = df_cl) +
geom_polygon(data = map_for,
aes(x = long,
y = lat,
group = group),
fill = "#FFFFFF",
color = "#000000") +
geom_scatterpie(data = df_cl,
aes(x = long,
y = lat,
group = obs,
r = 0.13),
cols = c("cl_1", "cl_2"),
color = NA,
alpha = 1) +
scale_fill_manual(values = c("cl_1" = "#3171FF", "cl_2" = "#E86815")) +
facet_wrap(~ year, ncol = 2) +
scalebar(data = df_cl,
dist = 100, dd2km = TRUE, model = "WGS84", location = "bottomright",
st.size = 3.6,
anchor = c(x = 131.5,
y = 33.25),
facet.var = "df_cl$year",
facet.lev = "year") +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(legend.position = "none",
strip.text = element_text(size = 20))
##Heatmap
df = read.csv("C:/Users/ChanWoo/Documents/R/10_19/calendar_heatmap.csv", stringsAsFactors = FALSE)
head(df)
gg_heat = ggplot(data = df,
aes(x = monthweek,
y = weekdayf,
fill = VIX.Close)) +
geom_tile(color = "white") +
facet_grid(year ~ monthf) +
scale_fill_gradient(low = "#FF0000", high = "#00FF00") +
labs(x = "Week of Month", y = NULL,
title = "Time-Series Calendar Heatmap",
subtitle = "Yahoo Closing Price",
fill = "Close")
gg_heat
library("ggpubr")
df = read.csv("C:/Users/ChanWoo/Documents/R/10_19/fund_bar_lolipop.csv", stringsAsFactors = FALSE)
# map_for = map_for[(map_for$long >= 125.6) & (map_for$long <= 130), ]
df_cl = read.csv("C:/Users/ChanWoo/Documents/R/2019_02_02 [ bike ]/clusters.csv")
##Heatmap
df = read.csv("C:/Users/ChanWoo/Documents/R/2019_02_02 [ bike ]/calendar_heatmap.csv", stringsAsFactors = FALSE)
head(df)
df = read.csv("C:/Users/ChanWoo/Documents/R/2019_02_02 [ bike ]/fund_bar_lolipop.csv", stringsAsFactors = FALSE)
head(df)
# 01
ggbarplot(df,
x = "Fund",
y = "Interest",
fill = "group",
color = "#FFFFFF",
palette = "jco",
sort.val = "asc",
sort.by.groups = FALSE,
x.text.angle = 90) +
geom_hline(yintercept = 0)
# 02
ggbarplot(df,
x = "Fund",
y = "Interest",
fill = "group",
color = "#FFFFFF",
palette = "jco",
rotate = TRUE,
sort.val = "asc",
sort.by.groups = FALSE) +
geom_hline(yintercept = 0)
##Bar-plot
install.packages("ggpubr")
library("ggpubr")
df = read.csv("C:/Users/ChanWoo/Documents/R/2019_02_02 [ bike ]/fund_bar_lolipop.csv", stringsAsFactors = FALSE)
head(df)
# 01
ggbarplot(df,
x = "Fund",
y = "Interest",
fill = "group",
color = "#FFFFFF",
palette = "jco",
sort.val = "asc",
sort.by.groups = FALSE,
x.text.angle = 90) +
geom_hline(yintercept = 0)
# 02
ggbarplot(df,
x = "Fund",
y = "Interest",
fill = "group",
color = "#FFFFFF",
palette = "jco",
rotate = TRUE,
sort.val = "asc",
sort.by.groups = FALSE) +
geom_hline(yintercept = 0)
##Bubble chart
library("ggpubr")
df = read.csv("fund_bar_lolipop.csv", stringsAsFactors = FALSE)
head(df)
ggdotchart(df,
x = "Fund",
y = "Invest",
color = "Type",
sorting = "asc",
add = "segments")
ggdotchart(df,
x = "Fund",
y = "Invest",
color = "Type",
rotate = TRUE,
dot.size = 7,
label = round(df$Invest),
font.label = list(size = 10,
vjust = 0.5),
sorting = "asc",
add = "segments")
##highchart
# install.packages("highcharter")
library("highcharter")
# 데이터 준비
data(diamonds, mpg, package = "ggplot2")
head(mpg)
# 산점도
hchart(object  = mpg,
type    = "scatter",
mapping = hcaes(x = displ,
y = hwy,
group = class))
# 막대 그래프
hchart(object = diamonds$cut,
colorByPoint = TRUE)
table(diamonds$cut)
# 선 그래프 + 시계열
# install.packages("forecast")
library("forecast")
airforecast = forecast(auto.arima(AirPassengers), level = 95)
hchart(airforecast)
str(forecast)
str(forecast)
airforecast = forecast(auto.arima(AirPassengers), level = 95)
str(airforecast)
hchart(airforecast)
airforecast
head(airforecast)
str(airforecast)
# 봉차트
# install.packages("quantmod")
library("quantmod")
highchart(type = "stock") %>%
hc_add_series(getSymbols("GOOG", auto.assign = FALSE)) %>%
hc_add_series(getSymbols("AMZN", auto.assign = FALSE),
type = "ohlc")
##D3.js
library("networkD3")
highchart(type = "stock") %>%
hc_add_series(getSymbols("GOOG", auto.assign = FALSE)) %>%
hc_add_series(getSymbols("AMZN", auto.assign = FALSE),
type = "ohlc")
str(hc_add_series)
str(getSymbols)
str(quantmod)
##D3.js
library("networkD3")
src = c(rep("A",4), rep("B", 2), rep("C", 2), "D")
target = c("B", "C", "D", "J", "E", "F", "G", "H", "I")
networkData = data.frame(src, target)
simpleNetwork(networkData)
##radarchart
# install.packages("radarchart")
library("radarchart")
labs = c("리스크", "매출", "자본", "규모", "시장", "부채")
scores = list("values" = c(6, 3, 8, 6, 9, 1))
chartJSRadar(scores = scores,
labs = labs,
width  = 20,
height = 20,
addDots = FALSE,
maxScale = 10,
lineAlpha = 0,
showLegend = FALSE)
devtools::install_github("cardiomoon/Kormaps")
install.packages("htmltools")
install.packages("htmltools")
install.packages("tmap")
install.packages("Rserve")
install.packages("rJAVA")
install.packages("rJava")
installed.packages()
library(htmltools)
library(tmap)
library(tmap)
library(Rserve)
library(rJava)
getwd()
setwd("C:/Users/student/Documents/Rstudy/Rproejct/2019_02_02 [ bike ]")
library(htmltools)
library(tmap)
library(Rserve)
library(rJava)
library(dplyr)
getwd()
getwd()
setwd("C:/Users/student/Documents/Rstudy/Rproejct/2019_02_02 [ bike ]")
getwd()
install.packages("htmltools")
library(dplyr)
install.packages("htmltools")
library(htmltools)
library(tmap)
library(Rserve)
library(rJava)
devtools::install_github("cardiomoon/Kormaps")
install.packages("htmltools")
install.packages("tmap")
install.packages("Rserve")
install.packages("rJava")
library(htmltools)
library(tmap)
library(Rserve)
library(rJava)
library(dplyr)
setwd("C:/Users/student/Documents/Rstudy/Rproejct/2019_02_02 [ bike ]")
pdf <- read.table("product_click.log")
names(pdf) <- c("logdate", "product")
pdf <- pdf %>% select(product) %>%
group_by(product) %>% summarise(clickcount = n()) %>%
arrange(desc(clickcount)) %>% head(1)
pdf <- as.data.frame(pdf)
pdf
library(htmltools)
library(tmap)
library(Rserve)
library(rJava)
devtools::install_github("cardiomoon/Kormaps")
install.packages("htmltools")
library(htmltools)
install.packages("tmap")
library(tmap)
install.packages("Rserve")
library(Rserve)
install.packages("rJava")
library(rJava)
library(dplyr)
setwd("C:/Users/student/Documents/Rstudy/Rproejct/2019_02_02 [ bike ]")
pdf <- read.table("product_click.log")
names(pdf) <- c("logdate", "product")
pdf <- pdf %>% select(product) %>%
group_by(product) %>% summarise(clickcount = n()) %>%
arrange(desc(clickcount)) %>% head(1)
pdf <- as.data.frame(pdf)
pdf
library(htmltools)
library(tmap)
library(Rserve)
library(rJava)
library(dplyr)
setwd("C:/Users/student/Documents/Rstudy/Rproejct/2019_02_02 [ bike ]")
pdf <- read.table("product_click.log")
names(pdf) <- c("logdate", "product")
pdf <- pdf %>% select(product) %>%
group_by(product) %>% summarise(clickcount = n()) %>%
arrange(desc(clickcount)) %>% head(1)
pdf <- as.data.frame(pdf)
pdf
install.packages("RJDBC")
install.packages("RJDBC")
getwd()
install.packages("rJAVA")
install.packages("rJava")
install.packages("KoNLP")
install.packages("leaflet")
install.packages("rJava")
install.packages("RJDBC")
install.packages("leaflet")
library("askpass", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("assertthat", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("backports", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("base64enc", lib.loc="C:/Program Files/R/R-3.5.2/library")
seoul_lonlat
seoul_lonat[2]
seoul_lonlat[2]
lng
##################################################################
library(leaflet)
library(dplyr)
bike_2018 = read.csv("C:/Users/ChanWoo/Desktop/따릉이 분석/2018 공공 자전거/대여소 위치 정보/대여소정보.csv", stringsAsFactors = FALSE)
str(bike_2018)
head(bike_2018)
tail(bike_2018)
leaflet(bike_2018) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~경도, lat=~위도,popup = ~대여소명)
rm(list=ls())
install.packages("ggmap")
library(ggmap)
lon <- 127.0147559
lat <- 37.5431424
cen <- c(lon,lat)
mk <- data.frame(lon=lon, lat=lat)
register_google(key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY")
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="satellite",zoom=14, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="terrain",zoom=8, marker=mk)
ggmap(map)
mk <- geocode("seoul", source = "google")#dsk")
print(mk)
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
mk <- geocode(enc2utf8("부산"), source = "google")#source = "dsk")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
mk <- geocode(enc2utf8("서울특별시 강남구 역삼동 테헤란로 212"), source = "google")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
library(XML)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "402"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
busRouteId <- df$busRouteId
busRouteId
url <- paste("http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=", API_key, "&busRouteId=", busRouteId, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc); top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
# 구글 맵에 버스 위치 출력
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=gc)
ggmap(map)
##################################################################
library(leaflet)
library(dplyr)
bike_2018 = read.csv("C:/Users/ChanWoo/Desktop/따릉이 분석/2018 공공 자전거/대여소 위치 정보/대여소정보.csv", stringsAsFactors = FALSE)
str(bike_2018)
head(bike_2018)
tail(bike_2018)
leaflet(bike_2018) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~경도, lat=~위도,popup = ~대여소명)
bike_2018 = read.csv("C:/Users/ChanWoo/Desktop/따릉이 분석/2018 공공 자전거/대여소 위치 정보/대여소정보.csv", stringsAsFactors = FALSE)
bike_2018 = read.csv("C:/Users/ChanWoo/Desktop/따릉이 분석/2018 공공 자전거/대여소 위치 정보/대여소정보.csv", stringsAsFactors = FALSE)
getwd()
install.packages("dplyr")
